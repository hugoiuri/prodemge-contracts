{"version":3,"sources":["components/Header.jsx","components/TreemapView.jsx","components/Contract.jsx","pages/HomePage.jsx","pages/ContractPage.jsx","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","Link","to","TreemapView","methods","data","size","d","value","groupBy","id","tooltipConfig","body","table","number","status","statusFaturamento","footer","title","on","click","window","location","concat","code","shapeConfig","fill","comparacaoSaldo","es","config","Contract","codigoContrato","console","log","dadosContrato","dataBase","find","element","_IDCNT","toString","Status","ComparacaoSaldo","StatusFaturamento","Cliente","CODIGOCONTRATO","DATAINICIO","DATAFIM","SALDOTOTALCONTRATO","SALDOFATURAMENTOCONTRATO","SALDOFATURAPAGACONTRATO","HomePage","Component","ContractPage","this","match","params","Boolean","hostname","ReactDOM","render","BrowserRouter","Switch","Route","path","exact","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45bd1f5d.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom'\n\nexport default props =>\n  <nav className=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top pt-2 pb-2\">\n      <Link className=\"navbar-brand\" to=\"/\" >HACKATHON PRODEMGE <small>Painel de Negócios</small></Link>\n  </nav>","import React from 'react';\n\nimport { Treemap } from 'd3plus-react'\n\nimport data from '../database/treemap.json'\n\n\nexport default props => {\n\n  const methods = {\n    data,\n    size: d => d.value,\n    groupBy: d => d.id,\n    tooltipConfig: {\n      body: d => {\n        var table = \"<table class='tooltip-table'>\";\n        table += \"<tr><td class='title'>Número do Contrato: </td><td class='data'>\" + d.number + \"</td></tr>\";\n        table += \"<tr><td class='title'>Status: </td><td class='data'>\" + d.status + \"</td></tr>\";\n        table += \"<tr><td class='title'>Faturamento: </td><td class='data'>\" + d.statusFaturamento + \"</td></tr>\";\n        table += \"</table>\";\n        return table;\n      },\n      footer: d => {\n        return \"<sub class='tooltip-footer'>Dados coletados em dezembro de 2018</sub>\";\n      },\n      title: d => d.id\n    },\n    on: {\n      click: d => {\n        window.location = `/contract/${d.code}`;\n      }\n    },\n    shapeConfig: {\n      fill: d => {\n        if (d.comparacaoSaldo === 'Contrato sem saldo'\n          || d.statusFaturamento === 'Contrato Vencido sem saldo'\n          || d.status === 'Vencido') {\n          return 'red'\n        }\n\n        if (d.statusFaturamento === 'Contrato com faturamento superior ao valor contratado'\n          || d.statusFaturamento === 'Contrato com pagamento em aberto'\n          || d.status === 'Renovar') {\n          return 'orange'\n        }\n\n        return 'blue';\n      }\n    }\n  }\n\n  return (\n    <Treemap config={methods} />\n  )\n}","import React from 'react';\nimport dataBase from '../database/data.json'\n\nexport default props => {\n  const { codigoContrato } = props;\n\n  console.log(codigoContrato);\n\n  if (!codigoContrato) return null;\n\n  let dadosContrato = dataBase.find(element => {\n    if (element._IDCNT.toString() === codigoContrato) {\n      return true\n    } else {\n      return false\n    }\n  });\n\n  console.log(dadosContrato);\n\n  return (\n    <div>\n      <p><h2>Detalhes do contrato</h2></p>\n      <br/>\n      <p><h3 >Status da vigência: {dadosContrato.Status}</h3></p>\n      <p><h3>Status detalhado: {dadosContrato.ComparacaoSaldo}</h3></p>\n      <p><h3>Status dos faturamentos: {dadosContrato.StatusFaturamento}</h3></p>\n\n      <p>Cliente: {dadosContrato.Cliente}</p>\n      <p>Código do Contrato: {dadosContrato.CODIGOCONTRATO}</p>\n      <p>Data de início do contrato: {dadosContrato.DATAINICIO}</p>\n      <p>Data de término do contrato: {dadosContrato.DATAFIM}</p>\n      <p>Valor contratual: {dadosContrato.SALDOTOTALCONTRATO},00</p>\n      <p>Valor total faturado: {dadosContrato.SALDOFATURAMENTOCONTRATO},00</p>\n      <p>Valor total pago: {dadosContrato.SALDOFATURAPAGACONTRATO},00</p>\n      \n    </div>\n    \n  );\n\n}","import React, { Component } from 'react';\n\nimport { Header, TreemapView } from '../components';\n\nexport default class HomePage extends Component {\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"container-fluid\">\n          <TreemapView />\n        </div>\n      </div>\n    );\n  };\n}","import React, { Component } from 'react';\n\nimport { Header, Contract } from '../components';\n\nexport default class ContractPage extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <div className=\"container-fluid page\">\n          <Contract codigoContrato={this.props.match.params.id} />\n        </div>\n      </div>\n    );\n  };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport './css/index.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { HomePage, ContractPage } from './pages';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Switch>\n      <Route path=\"/\" exact={true} component={HomePage} />\n      <Route path=\"/contract/:id\" component={ContractPage} />\n    </Switch>\n  </BrowserRouter>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}